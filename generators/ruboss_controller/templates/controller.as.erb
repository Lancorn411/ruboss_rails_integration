package <%= base_package %>.controllers {
  import <%= base_package %>.models.*;
  import <%= base_package %>.commands.*;
	
  import org.ruboss.Ruboss;
  import org.ruboss.controllers.RubossCommandsController;
  import org.ruboss.utils.RubossUtils;

  import org.ruboss.events.RubossEvent;
  import org.ruboss.controllers.ICommand;
  import org.ruboss.controllers.RubossCommandsEventDispatcher;

  public class <%= command_controller_name %> extends RubossCommandsController {
    private static var controller:<%= command_controller_name %>;
    
    public static var models:Array = [<%= model_names %>]; /* Models */
    
    public function <%= command_controller_name %>(enforcer:SingletonEnforcer, extraServices:Array,
      defaultServiceId:int = -1) {
      super([<%= command_names %>] /* Commands */, 
        models, extraServices, defaultServiceId);
    }
    
    public static function get instance():<%= command_controller_name %> {
      if (controller == null) initialize();
      return controller;
    }
    
    public static function initialize(extraServices:Array = null, defaultServiceId:int = -1,
      airDatabaseName:String = null):void {
      if (!RubossUtils.isEmpty(airDatabaseName)) Ruboss.airDatabaseName = airDatabaseName;
      controller = new <%= command_controller_name %>(new SingletonEnforcer, extraServices,
        defaultServiceId);
      Ruboss.commands = controller;
    }
	
	/**
	 * These can be switched into the main RubossCommandsController class later...
	 * It's basically cairngorm, but since this is the only part we need to add
	 * CustomCommands, I am hacking it in here for now to avoid adding all of Cairngorm
	 * which will just add unnecessary bulk.
	 */
	
	public function addCustomCommand(commandName:String, cmd:Class, useWeakReference:Boolean = true):void {
       commands[commandName] = cmd;
       RubossCommandsEventDispatcher.getInstance().addEventListener(commandName, executeCustomCommand, false, 0, useWeakReference );
    }

	protected function executeCustomCommand(event:RubossEvent):void {
       var commandToInitialise:Class = getCustomCommand(event.type);
       var commandToExecute:ICommand = new commandToInitialise();

       commandToExecute.execute(event);
    }
      
   /**
    * Returns the command class registered with the command name. 
    */
    protected function getCustomCommand(commandName:String):Class {
       var command:Class = commands[commandName];
         
       return command;
    }
  }
}

class SingletonEnforcer {}
