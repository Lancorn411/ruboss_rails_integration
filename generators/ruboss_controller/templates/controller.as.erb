package <%= base_package %>.controllers {
  import <%= base_package %>.models.*;
  import <%= base_package %>.commands.*;
  import <%= base_package %>.controllers.<%= project_name %>Event;
	
  import org.ruboss.Ruboss;
  import org.ruboss.controllers.RubossCommandsController;
  import org.ruboss.utils.RubossUtils;

  import org.ruboss.events.RubossEvent;
  import org.ruboss.controllers.ICommand;
  import org.ruboss.controllers.RubossCommandsEventDispatcher;

  import <%= base_package %>.commands.*;

  public class <%= command_controller_name %> extends RubossCommandsController {
    private static var controller:<%= command_controller_name %>;
    
    public static var models:Array = [<%= model_names %>]; /* Models */
    
    public function <%= command_controller_name %>(enforcer:SingletonEnforcer, extraServices:Array,
      defaultServiceId:int = -1) {
      super([<%= command_names %>], /* Commands */
		models, extraServices, defaultServiceId);
	  
	  initializeCommand();
    }

	public function initializeCommand():void {
		addCommandByName(<%= project_name %>Event.CREATE_SESSION, SessionsCommand);
		addCommandByName(<%= project_name %>Event.DESTROY_SESSION, SessionsCommand);	
<% for model in event_names %><% unless model == "#{project_name}ModelLocator" %>
		// Command for the <%= model %> model...
		addCommandByName(<%= project_name %>Event.LIST_<%= model.pluralize.upcase %>, <%= model %>Command);
		addCommandByName(<%= project_name %>Event.SHOW_<%= model.upcase %>, <%= model %>Command);
		addCommandByName(<%= project_name %>Event.CREATE_<%= model.upcase %>, <%= model %>Command);
		addCommandByName(<%= project_name %>Event.UPDATE_<%= model.upcase %>, <%= model %>Command);
		addCommandByName(<%= project_name %>Event.DESTROY_<%= model.upcase %>, <%= model %>Command);
<% end -%><% end -%>
	}
    
    public static function get instance():<%= command_controller_name %> {
      if (controller == null) initialize();
      return controller;
    }
    
    public static function initialize(extraServices:Array = null, defaultServiceId:int = -1,
      airDatabaseName:String = null):void {
      if (!RubossUtils.isEmpty(airDatabaseName)) Ruboss.airDatabaseName = airDatabaseName;
      controller = new <%= command_controller_name %>(new SingletonEnforcer, extraServices,
        defaultServiceId);
      Ruboss.commands = controller;
    }
  }
}

class SingletonEnforcer {}
