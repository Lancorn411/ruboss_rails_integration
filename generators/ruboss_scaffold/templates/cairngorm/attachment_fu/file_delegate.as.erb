package <%= base_package %>.business {
	
	import flash.events.*;
	import flash.net.FileFilter;
	import flash.net.FileReference;
	import flash.net.FileReferenceList;
	import flash.net.URLRequest;
	import flash.net.URLRequestMethod;
	import flash.net.URLVariables;
	import flash.net.navigateToURL;
	
	import mx.collections.ArrayCollection;
	import mx.controls.Alert;
	
	import <%= base_package %>.models.User;

	public class FileDelegate  {
		private var railsController:String;
	    private var uploadURL:URLRequest;
		private var downloadURL:URLRequest;
	    private var pendingFiles:Array;
		private var uploadFileRefList:FileReferenceList;
		private var downloadFileRef:FileReference;
		private var filesToUpload:ArrayCollection;
		private var uploadedFiles:ArrayCollection;
		private var user:User;

	    public function FileDelegate(railsController:String) {
			this.railsController = railsController;
			uploadFileRefList = new FileReferenceList();
			downloadFileRef = new FileReference();
			filesToUpload = new ArrayCollection();
			uploadedFiles  = new ArrayCollection();
			uploadFileRefList.addEventListener(Event.SELECT, uploadSelectHandler);
	    }
	    
		// UPLOAD FUNCTIONS
		
		// Change the "User" to match whatever name you called the user Model. Also the import statement...
		public function upload(user:User):void
		{
			this.user = user;
			uploadURL = new URLRequest();
	        uploadURL.url = railsController + "/upload";
	
			try {
	    		var success:Boolean = uploadFileRefList.browse(getTypes());
			} catch (error:Error) {
	    		trace("Unable to browse for files. " + error);
			}
		}
		
		private function uploadSelectHandler(event:Event):void
		{
			for each (var file:FileReference in uploadFileRefList.fileList)
				filesToUpload.addItem(file.name);

			doUpload(uploadFileRefList.fileList[0]);		
		}
		
		private function doUpload(file:FileReference):void
		{
			file.addEventListener(Event.COMPLETE, uploadCompleteHandler);
			file.addEventListener(IOErrorEvent.IO_ERROR, uploadIoErrorHandler);
			file.addEventListener(ProgressEvent.PROGRESS, uploadProgressHandler);

			var variables:URLVariables = new URLVariables();
			variables.user = user;
		
		    uploadURL.data = variables;

			try {
		        file.upload(uploadURL);
		
		    } catch (error:Error) {
		        trace("Unable to upload file. " + error);
		    }
		}
		
		private function uploadProgressHandler (event:ProgressEvent):void
		{
		}
		
		private function uploadIoErrorHandler (event:Event):void
		{
			trace ("Upload failed: " + event);
		}
		
		private function uploadCompleteHandler (event:Event):void
		{
			uploadedFiles.addItem(event.currentTarget.name);

			filesToUpload.removeItemAt(0);

			uploadFileRefList.fileList.splice(0, 1);

			if (filesToUpload.length == 0)
			{
				event.currentTarget.removeEventListener(Event.COMPLETE, uploadCompleteHandler);
				event.currentTarget.removeEventListener(IOErrorEvent.IO_ERROR, uploadIoErrorHandler);
				event.currentTarget.removeEventListener(ProgressEvent.PROGRESS, uploadProgressHandler);
			}
			else
			{
				doUpload(uploadFileRefList.fileList[0]);
			}
		}
		
		// DOWNLOAD FUNCTIONS
		
		// In this method, Rails does all the work
		public function railsDownload(directory:String, file:String):void
		{
			downloadURL = new URLRequest("http://localhost:3000/images/download");
			downloadURL.method = URLRequestMethod.POST;

			var variables:URLVariables = new URLVariables();
			variables.directory = "public/bin/" + directory + "/";
			variables.filename = file;

			downloadURL.data = variables;

			navigateToURL(downloadURL, "_top");

		}
		
		// In this method, Flex does all the work.  You don't see the file download
		// status in the traditional browser box this way.	
		public function flexDownload(directory:String, file:String):void
		{
			downloadFileRef.addEventListener(Event.COMPLETE, downloadCompleteHandler);
			downloadFileRef.addEventListener(ProgressEvent.PROGRESS, downloadProgressHandler);
			downloadFileRef.addEventListener(IOErrorEvent.IO_ERROR, downloadIOHandler);

		    downloadURL = new URLRequest("http://localhost:3000/bin/" + directory + "/" + file);
		    downloadURL.method = URLRequestMethod.POST;

		    try {
		        downloadFileRef.download(downloadURL);
		
		    } catch (error:Error) {
		        trace("Unable to download file. " + error);
		    }
		}
		
		private function downloadProgressHandler(event:ProgressEvent):void
		{
		}

		private function downloadIOHandler(event:Event):void
		{
			trace ("Download failed: " + event);
		}

		private function downloadCompleteHandler(event:Event):void
		{
			downloadFileRef.removeEventListener(Event.COMPLETE, downloadCompleteHandler);
			downloadFileRef.removeEventListener(ProgressEvent.PROGRESS, downloadProgressHandler);
			downloadFileRef.removeEventListener(IOErrorEvent.IO_ERROR, downloadIOHandler);
		}
		
		// Filtering functions...
		
	    public function getTypes():Array {
	        var allTypes:Array = new Array();
	        allTypes.push(getImageTypeFilter());
	        allTypes.push(getTextTypeFilter());
	        return allTypes;
	    }

	    private function getImageTypeFilter():FileFilter {
	        return new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg;*.jpeg;*.gif;*.png");
	    }

	    private function getTextTypeFilter():FileFilter {
	        return new FileFilter("Text Files (*.txt, *.rtf)", "*.txt;*.rtf");
	    }
	}
}