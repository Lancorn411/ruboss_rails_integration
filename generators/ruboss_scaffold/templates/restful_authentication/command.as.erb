package <%= base_package %>.commands {

	import mx.controls.Alert;
	import mx.rpc.IResponder;
	
	import org.ruboss.Ruboss;
	import org.ruboss.events.RubossEvent;
	import org.ruboss.controllers.ICommand;
	import org.ruboss.controllers.SimpleHTTPController; 
	import org.ruboss.services.http.HTTPServiceProvider;
	
	import <%= base_package %>.models.<%= class_name %>;
	import <%= base_package %>.models.<%= project_name %>ModelLocator;
	import <%= base_package %>.controllers.<%= project_name %>Events;

	public class SessionsCommand implements ICommand, IResponder {
		
		// The SimpleHTTPController is the long way of making an HTTP Request.
		// It can do GET, PUT, POST, and DELETE
		// You would normally do Ruboss.models.create(Sessions), but we don't have a Sessions model.
		
		private var _session:Object;
		private var appModel:<%= project_name %>ModelLocator = <%= project_name %>ModelLocator.getInstance();
	
    	/**
     	 * Command Constructor.
     	 * Creates the "<%= class_name %>" Model from the Cairngorm Event data.
	 	 * This allows common RESTful functions (show, create, update, delete)
	 	 * to be reused by multiple views, thereby following the DRY principle.
     	 */
    	public function SessionsCommand() {
			super();
		}
	
		public function execute(event:RubossEvent):void {
			_session = event.data;

			switch(event.type)
        	{
				case <%= project_name %>Event.CREATE_SESSION:
					createSession();
					break;
				case <%= project_name %>Event.DESTROY_SESSION:
					destroySession();
					break;
        	}
		}
		
    	/**
     	 * POST /sessions
	 	 * POST /sessions.xml
     	 */
		public function createSession():void {
			// the "session" is the url we invoke in rails.
			new SimpleHTTPController().send("session", {login: _session.login,
				password: _session.password}, SimpleHTTPController.POST, this);  // "this" is the "responder"
		}

    	/**
     	 * DELETE /sessions
	 	 * DELETE /sessions.xml
     	 */
		public function destroySession():void {
			new SimpleHTTPController().send("session", {}, SimpleHTTPController.DELETE, this);
		}
		
		public function result(event:Object):void { 
			// 'event.result' is going to be what the session controller returns (XML)
		    // You must then unmarshall the XML response
		    // into the <%= class_name %> model object.
			
            if (event.result == "badLogin") {
                var alert:Alert = Alert.show("Incorrect username or password, please try again.");
            } else if (event.result == "loggedOut") {
				appModel.workflowState = <%= project_name %>ModelLocator.VIEWING_ACCOUNT_SCREEN;
				appModel.<%= class_name.downcase_first_letter %> = null;
			} else {
				var <%= class_name.downcase_first_letter %>:<%= class_name %> = Ruboss.services.getServiceProvider(HTTPServiceProvider.ID).unmarshall(event.result) as <%= class_name %>; 
			
			// Unmarshaller will try it's best to figure out what it received
		 	// (e.g. if it is a single object it will return a typed object (e.g. <%= class_name %>); 
		    // if it is a list of objects it will return an array. 
		    // Once you have an unmarshalled object you can do whatever you want with it
		 	appModel.<%= class_name.downcase_first_letter %> = <%= class_name.downcase_first_letter %>;
			appModel.workflowState = <%= project_name %>ModelLocator.VIEWING_MAIN_APP;
			}
		} 

		public function fault(info:Object):void { 
			Alert.show("There was an error in creating your Session."); 
		}
	}
}